{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-26T14:31:41.968Z",
    "end": "2024-07-26T14:31:43.007Z",
    "duration": 1039,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e456268-be40-453f-9d99-9d134f01986e",
      "title": "",
      "fullFile": "D:\\PERSONAL\\LEARN\\QA\\github\\sbcode-api-automation\\test\\api\\auth\\registration.test.js",
      "file": "\\test\\api\\auth\\registration.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db9a68d0-bcca-4bbc-a634-1dc133f1f5ee",
          "title": "Test suite for 'Authorization'",
          "fullFile": "D:\\PERSONAL\\LEARN\\QA\\github\\sbcode-api-automation\\test\\api\\auth\\registration.test.js",
          "file": "\\test\\api\\auth\\registration.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC1 - POST/Users ",
              "fullTitle": "Test suite for 'Authorization' TC1 - POST/Users ",
              "timedOut": false,
              "duration": 1028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomName = `user${randomId(5)}`\nconst randomEmail = `${randomName}@mail.com`\nconst schema = readJsonSchema('auth', 'registrationResponseSchema.json')\nconst payload = {\n    name: randomName,\n    email: randomEmail,\n    password: 'P@ssw0rd',\n}\nconst response = await request(baseUrl)\n    .post('/registration')\n    .send(payload)\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\nawait console.log(response.body)\nexpect(response.status).to.equal(201)\nexpect(response.body.status).to.equal('success')\nexpect(response.body).to.be.jsonSchema(schema)",
              "err": {},
              "uuid": "316a9429-3d62-475d-b16e-6241d2779457",
              "parentUUID": "db9a68d0-bcca-4bbc-a634-1dc133f1f5ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "316a9429-3d62-475d-b16e-6241d2779457"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1028,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[status]_[20240726_213141]-[name]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "[status]_[20240726_213141]-[name]-report",
        "html": "true",
        "json": "true",
        "overwrite": "false",
        "timestamp": "longDate"
      },
      "version": "6.2.0"
    }
  }
}